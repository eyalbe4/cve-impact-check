package commands

import (
	"errors"
	"github.com/hashicorp/go-uuid"
	"github.com/rdar-lab/cve-impact-check/service"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
	"os"
	"testing"
)

type DummyServerConnector struct {
	impactedComponents bool
	impactedArtifacts  bool
	issueFound         bool
}

func (dummy *DummyServerConnector) Connect(serverId string) error { return nil }
func (dummy *DummyServerConnector) GetIssueDetails(issueId string) (string, string, error) {
	if dummy.issueFound {
		return "CVE-1", "Vulnerability", nil
	}
	return "", "", errors.New("issue not found")
}
func (dummy *DummyServerConnector) GetImpactedComponents(issueId string) ([]service.ImpactedComponent, error) {
	if dummy.impactedComponents {
		return []service.ImpactedComponent{
			{
				Name:        "Test",
				PackageType: "Maven",
				Version:     "1",
			},
		}, nil
	} else {
		return []service.ImpactedComponent{}, nil
	}
}
func (dummy *DummyServerConnector) DeleteReport(reportId int) error { return nil }
func (dummy *DummyServerConnector) GetReportData(reportId int) ([]service.ImpactedArtifact, error) {
	if dummy.impactedArtifacts {
		return []service.ImpactedArtifact{
			{
				Summary:   "Test",
				Component: "Test",
				Artifact:  "Test",
				Path:      "Test",
			},
		}, nil
	} else {
		return []service.ImpactedArtifact{}, nil
	}
}
func (dummy *DummyServerConnector) WaitForReportGeneration(reportId int) error {
	return nil
}
func (dummy *DummyServerConnector) TriggerNewReportGeneration(issueId string, repositories []string) (int, error) {
	return 0, nil
}

type CheckCommandSuite struct {
	suite.Suite
}

func (suite *CheckCommandSuite) TestIncorrectIssueIdFormat() {
	conf := &checkConfiguration{
		issueId: "NOT_IN_RIGHT_FORMAT",
	}

	err := doCheck(conf, &DummyServerConnector{})
	assert.NotNil(suite.T(), err)
	assert.Equal(suite.T(), err.Error(), "incorrect ID format. Please use only XRAY-XXX or CVE-XXX formats")
}

func (suite *CheckCommandSuite) TestCorrectIdFormat() {
	conf := &checkConfiguration{
		issueId: "XRAY-1234",
	}

	err := doCheck(conf, &DummyServerConnector{issueFound: true})
	assert.Nil(suite.T(), err)

	conf = &checkConfiguration{
		issueId: "CVE-1234",
	}

	err = doCheck(conf, &DummyServerConnector{})
	assert.Nil(suite.T(), err)
}

func (suite *CheckCommandSuite) TestIssueNotFound() {
	conf := &checkConfiguration{
		issueId: "XRAY-1234",
	}

	err := doCheck(conf, &DummyServerConnector{issueFound: false})
	assert.NotNil(suite.T(), err)
	assert.Equal(suite.T(), err.Error(), "issue not found")
}

func (suite *CheckCommandSuite) TestNoRepositoriesConf() {
	conf := &checkConfiguration{
		issueId:         "XRAY-1234",
		exportArtifacts: true,
	}

	err := doCheck(conf, &DummyServerConnector{
		impactedComponents: true,
		impactedArtifacts:  true,
		issueFound:         true,
	})
	assert.NotNil(suite.T(), err)
	assert.Equal(suite.T(), err.Error(), "When selecting to export the impacted artifacts, the repository selection is required")
}

func (suite *CheckCommandSuite) TestGenerateOutput() {
	uuidStr, err := uuid.GenerateUUID()
	assert.Nil(suite.T(), err)

	defer func() {
		_ = os.Remove(uuidStr)
	}()

	conf := &checkConfiguration{
		issueId:         "XRAY-1234",
		exportArtifacts: true,
		repositories:    []string{"xxx"},
		outputFile:      uuidStr,
	}

	err = doCheck(conf, &DummyServerConnector{
		impactedComponents: true,
		impactedArtifacts:  true,
		issueFound:         true,
	})
	assert.Nil(suite.T(), err)
	_, err = os.Stat(uuidStr)
	assert.Nil(suite.T(), err)
}

func TestCheckCommandSuite(t *testing.T) {
	suite.Run(t, new(CheckCommandSuite))
}
