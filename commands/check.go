package commands

import (
	"errors"
	"github.com/jfrog/jfrog-cli-core/v2/plugins/components"
	"strconv"
	"strings"
)

func GetCheckCommand() components.Command {
	return components.Command{
		Name:        "check",
		Description: "Checks if a CVE/XRAY ID has impact on a system",
		Aliases:     []string{"c"},
		Arguments:   getCheckArguments(),
		Flags:       getCheckFlags(),
		EnvVars:     getCheckEnvVar(),
		Action: func(c *components.Context) error {
			return checkCmd(c)
		},
	}
}

func getCheckArguments() []components.Argument {
	return []components.Argument{
		{
			Name:        "issue_id",
			Description: "The CVE or XRAY ID of the issue",
		},
	}
}

func getCheckFlags() []components.Flag {
	return []components.Flag{
		components.BoolFlag{
			Name:         "export_impacted_artifacts",
			Description:  "Generate a report of the impacted artifacts",
			DefaultValue: false,
		},
		components.StringFlag{
			Name:         "repositories",
			Description:  "Comma separated list of repositories to check in",
			DefaultValue: "",
		},
		components.StringFlag{
			Name:         "output",
			Description:  "The destination output file",
			DefaultValue: "out.csv",
		},
	}
}

func getCheckEnvVar() []components.EnvVar {
	return []components.EnvVar{}
}

type checkConfiguration struct {
	issueId         string
	exportArtifacts bool
	repositories    []string
	outputFile      string
}

func checkCmd(c *components.Context) error {
	if len(c.Arguments) != 1 {
		return errors.New("Wrong number of arguments. Expected: 1, " + "Received: " + strconv.Itoa(len(c.Arguments)))
	}
	var conf = new(checkConfiguration)
	conf.issueId = c.Arguments[0]
	conf.exportArtifacts = c.GetBoolFlagValue("export_impacted_artifacts")

	reposStr := c.GetStringFlagValue("repositories")
	if reposStr == "" {
		conf.repositories = nil
	} else {
		conf.repositories = strings.Split(reposStr, ",")
	}
	conf.outputFile = c.GetStringFlagValue("output")

	return doCheck(conf)
}

func doCheck(c *checkConfiguration) error {
	return errors.New("not implemented yet")
}
